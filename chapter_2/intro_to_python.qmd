---
title: Welcome to Python
date-format: long
date-modified: last-modified
lang: en
language: 
  title-block-modified: "Last update"
---

## Computation

Computation, once too technical and expensive to be of use outside of specialised realms and big budget tech firms, has become accessible to almost anyone with a computer. The ability to perform calculations to perform a task has evolved rapidly from rudimentary mechanical devices to increasingly efficient digital computers. The combination of open source software, networked information on the worldwide web, and Large Language Model AI tools capable of synthesising this information means that the rate of development is now difficult to fathom. It also means that resources for learning have never been better...!

Two pivotal figures in the history of computation are [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing) and [John von Neumann](https://en.wikipedia.org/wiki/John_von_Neumann).

Alan Turing introduced the concept of the Turing machine in 1936. This is an abstract device conceived to encapsulate the underlying essence of computation. Turing's machine can, in theory, simulate any other machine's computation process, thus providing a universal model for computing. Turing's work during World War II on breaking the Enigma code is also celebrated for its profound impact on the outcome of the war and the field of cryptography.

John von Neumann contributed significantly to the development of the architecture of modern computers and was instrumental in the realisation of some of the earliest computing devices. He had a prodigious output and dabbled with fascinating ideas along the way, such as Cellular Automata. An engaging review of this early history can be found in the book [Turing's Cathedral](https://www.theguardian.com/books/2012/mar/25/turings-cathedral-george-dyson-review).

## Why Python?

Early programming languages, some of which are still in use today, were very "low-level" languages, meaning they operated closer to the hardware level, directly manipulating the computer's memory and processing capabilities. Early computers had very limited processing power and memory compared to today, and it was therefore necessary to manage computational and memory resources in closely monitored and complex ways. Low-level languages are still used for specialised or performance critical purposes, but they are overkill for the great majority of everyday use-cases: their complexities can make it very difficult to learn how to code and can seriously hamper productivity. 

Enter Python! 

Python, created by Guido van Rossum and released in the early 90s, is a high-level, interpreted programming language known for its simplicity and readability, making it ideal for beginners and experienced programmers alike. It offers an easy-to-use syntax that lends itself to clear and readible code that is easier to develop and maintain. Python has evolved over time and is now at version 3. It has reached a level of maturity and is supported by a burgeoning ecosystem of third-party packages making it an indispensible choice for tasks such as data science, geospatial analysis, and scientific computing.

Some tips:

- Don't get distracted by arguments of performance. People will sometimes talk about how one language outperforms another, but in reality the most important aspect is the usability, versatility, and speed of development. It's like saying you want to use a formula 1 car on an offroad course. Python itself is a so-called "slow" language but it wraps highly optimised and performant packages under-the-hood, so it can offer the best of both worlds: usability where it matters and performance where it counts.

- Python is more verstaile than the `R` language, which is sometimes popular with dedicated academics, statisticians, or geographers. You are free to learn `R` and other languages, but please don't get caught up in endless comparisons.

## Setup

In the past, one of the initial hurdles for beginners learning Python was the process of setting up a development environment. This involves installing Python, managing dependencies, and configuring an Integrated Development Environment (IDE). Each of these steps comes with its own set of challenges, from dealing with system path variables to understanding virtual environments for managing project-specific dependencies without conflicts.

Jupyter Notebooks bypass this initial complexity and gets us straight to the fun parts. A code notebook provides an interactive computing environment, making it an ideal tool for learning, sharing, and storytelling with code and data. Anaconda + JupyterLab is a fantastic way to get started with Python, and we recommend staying with these for the time being. That said, those of you who would like to become more proficient Python users over time will benefit from using a more structured Python development environment. But please don't get bogged down in this until you've first gained a bit of momentum.

## When you get stuck

Roughly ten years ago, resources such as [Stack Overflow](https://stackoverflow.com) were indispensible. However, Stack Overflow has been now been usurped by Large Language Models such as ChatGPT, which are excellent for reading, debugging, and suggesting code. Note, however, that as useful as these can be, they can still 'miss-the-mark' or hallucinate, in which case you'll need to roll up your sleeves and do things the old-fashioned way. LLMs are going to make your life much easier, but they could also make you lazy or over-confident...!

In class, we'll point you to a Github Repository where you can post questions or ask for help for specific issues. Please do try to use Stack Overflow and ChatGPT as a first port of call or for generic questions.

## Some basics

Fire up your JupyterLab and follow along by typing and executing these examples. You can hover over a cell and click the copy icon to copy the code.

```{python}
a_variable = 'boo'
print(a_variable)
```

Python works with variables which store references to information. These variables can be named so that they are easy to remember and should be descriptive so that they make their purpose clear. By convention, variables in Python use lower caps with underscores and should not start with a number. An exception is class names, which typically start with a capitalised letter.

Notice that these variable names don't tell us very much:

```{python}
a = 21
b = 34
d = b - a
```

But these ones do:
```{python}
temp_day_1 = 21
temp_day_2 = 34
temp_diff = temp_day_2 - temp_day_1
```

You should also use comments to explain your code, this becomes important as the code grows in complexity. Use a hash symbol for a line comment and triple quotes for block comments.

```{python}
"""
The following lines detail the procedure for
computing a temperature difference from day 1 to 2.
"""
# the temperature on day 1
temp_day_1 = 21
# the temperature on day 2
temp_day_2 = 34
# the temperature difference from day 1 to 2
temp_diff = temp_day_2 - temp_day_1
```

Another concept is the use of functions. Functions take parameters (arguments) and return a result according to a defined sequence of steps. In certain contexts they are also referred to as "methods" (in the context of "classes", but don't worry too much about that for now). A commonly used function in Python is `print()`. Notice that a function has parentheses, and this is where you pass your function arguments.

```{python}
# you can pass a parameter to print()
# it will then take the parameter and print it to the screen
print('This will print boo!')
# the same for a variable
print(temp_diff)
# and in the case of the print() method
# multiple arguments can be passed at once
# function arguments are separated with commas
print('The temp diff is:', temp_diff)
```

You can define a function using the `def` keyword. Let's define a function which takes a number and multiplies it by a specified multiplier.

```{python}
# you must use "def"
# define your parameters
def num_multiply(a_number, the_multiple):
  # note the use of indented lines
  multiplied_number = a_number * the_multiple
  # you must return a value if you want to use
  # it outside of the function
  return multiplied_number

# let's try it out
# assign the returned value to a variable
out_num_a = num_multiply(2, 2)
print('2x2=', out_num_a)
# functions save us from rewriting the
# same bits of code over and over...
# we can use the same logic with new arguments
out_num_b = num_multiply(3, 10)
print('3x10=', out_num_b)
```

> If you find yourself writing bits of code which seem repetitive, then you probably want to be using functions...!

Variables can store different kinds of data, including `str`, `int`, `float` (decimal), and other types such as "booleans" (`True` and `False`) and `None` types. If you want to find out what `type` a variable is, you can use the built-in `type()` method, which will tell you what `type` a given variable is.

```{python}
# here we are nesting methods
# the type() method will run first and returns a result
# this result is then passed to the print() method
print(type(a_variable))
print(type(temp_diff))
print(type(1))
print(type(1.0))
print(type(True))
print(type(None))
```

Once you've assigned a value to a variable, you can use this variable to do things like maths (in the case of `int` or `float` types).

```{python}
temp_day_1 = 21
temp_day_2 = 34
print('added:', temp_day_1 + temp_day_2)
print('subtracted:', temp_day_2 - temp_day_1)
print('divided:', temp_day_2 / 2)
# modulo gives the remainder after division
print('modulo:', temp_day_1 % 2)
```

It is a good idea to become familiar with [Python Operators](https://www.w3schools.com/python/python_operators.asp): these will become second nature over time. Here are some examples:

```{python}
# you can assign new values to existing variables
my_var1 = 5
my_var1 = my_var1 + 10
print('addition', my_var1)
# assignment operators can be combined with arithmetic
my_var2 = 5
my_var2 += 10
print('increment', my_var2)
```

Checking for equality is done with double equal signs.

```{python}
print('checks equal:', my_var1 == my_var2)
print('checks equal:', my_var1 == 'boo')
# returns True if not equal, otherwise False
print('checks not equal:', my_var1 != my_var2)
print('checks not equal:', my_var1 != 'boo')
```

Use "is" when checking for booleans or None types.

```{python} 
none_var = None
print('checks None:', none_var is None)
none_var = 'boo'
print('checks None:', none_var is None)
bool_var = True
print('checks True:', bool_var is True)
bool_var = False
print('checks True:', bool_var is True)
```

Pay attention to operator precedence, use brackets to make your intentions explicit.

```{python}
print('precedence a:', 5 * 10 + 2)
print('precedence b:', 5 * (10 + 2))
```

You can do surprising things with strings as well.

```{python}
part_1 = 'Hello'
part_2 = 'there!'
# here we'll combine the parts using an empty space
together = part_1 + ' ' + part_2
print(together)
# there are a large number of built-in methods for strings
# here are a few examples
print(part_1.lower())
print(part_1.upper())
print(part_1.lstrip('H'))
print('str len:', len('what is the length of a piece of string?'))
```

Python has some other types that can be useful. One of these is lists, which use square brackets to collect several items into the same variable.
```{python}
my_list = [1, 2, 3, 4]
# the built-in len() method gets the length of a list
print('number of items:', len(my_list))
# use square brackets to index into a list
# in Python, lists are zero indexed
get_something = my_list[0]
print('first item:', get_something)
# gets the last item
get_something_else = my_list[-1]
print('last item:', get_something_else)
# gets list entries from index 0 to before index 2
get_several_things = my_list[0:2]
print('several items A:', get_several_things)
# which happens to be the same as this
get_several_things = my_list[0:-2]
print('several items B:', get_several_things)
# and this
get_several_things = my_list[-4:-2]
print('several items C:', get_several_things)
# let's add something to the list
my_list.append(5)
print('more items:', my_list)
```

You can use `in` and `not in` syntax to check if something is inside a list. This will return a `bool`, and if this evaluates to `True` then it will execute the indented code.

```{python}
# you can check if things are in a list
if 2 in my_list:
  print('yes, 2 is in my_list')
if 6 in my_list:
  print('not gonna see this!')
if 6 not in my_list:
  print('you will see this!!')
```

Note that you can iterate over lists using `for` and `in` syntax. For each loop of the iteration, the value at that iteration is assigned to a variable, which we are here calling `num`. We can then use that variable to do something.

```{python}
# this will print each number in my_list
for num in my_list:
    # note the indented line
    # indentation has to be used consistently
    print('num is currently:', num)
```

Python has a number of built-in convenience functions, which can simplify common tasks:

```{python}
# these will return the min and max values
print('min:', min(my_list))
print('max:', max(my_list))
print('min:', min('zfs'))
print('max:', max('zfs'))
```

```{python}
# you can cast types from one to another
# ...within reason
print('now an int:', int(4.0))
print('loses decimal:', int(4.5))
print('now a float:', float(4))
print('this works:', str(3))
```

```{python}
# uncomment to run
# print('this wont work': int('a'))
# some more built-in functions
# note the extra step to cast the output
print('without cast', reversed(my_list))
print('with cast:', list(reversed(my_list)))
print('absolute:', abs(-100))
```

## Importing packages

Python can import packages which contain reusable code.

Packages have to be installed before they are used, unless they are part of the default Python library. Note that this method of installing a package with a leading exclamation mark is particular to JupyterLab Notebooks, and only has to be done if the package is not yet installed.

```{python}
# checks that the shapely package
# is installed for this notebook
# uncomment the next line to run
# !pip install shapely
```

Once installed and available, we can use modules provided by the package. Here we are using the `from` and `import` syntax to import the `geometry` module which is available from the `shapely` package.

```{python}
from shapely import geometry
```

## Shapely

`shapely` let's us do some neat things with spatial information. Let's define a `Point` type using the `geometry` module. The `geometry` module has some already defined methods which we can call. Let's use the `Point` constructor to generate a new point. Note the use of dot-notation.

```{python}
# this creates a point using the Point constructor
# defined by the geometry module
point_a = geometry.Point(0, 0)
print(point_a)
print(type(point_a))
```

Different packages and modules define set patterns of behaviour. To understand what these are and what you can do with them, refer to the package documentation. If it is a widely used package with a lot of public examples, then you can ask ChatGPT to help you. Some packages are better documented than others. In the case of `shapely`, here is a link to the [official documents](https://shapely.readthedocs.io/en/stable/).

Alternatively, you can use the built-in `help()` method which will tell you more about a module or class' functionality.

```{python}
# this will return a lot of text
# uncomment to run
# help(point_a)
```

For example, a `shapely` `Point` type has built-in methods which allow you to easily produce certain forms of behaviour. You can access these using dot-notation. Let's buffer the point object using the provided `buffer()` method.

```{python}
buff = point_a.buffer(10)
print(buff)
print(type(buff))
```

Notice that we now have a `Polygon` type since the returned type is no longer a `Point`. Types (which are a form of Python `class`) can have properties which are accessed using dot-notation. Unlike methods, properties do not require parentheses because they do not accept arguments.

```{python}
# here we are using the area property to retrieve the area
print('Point area:', point_a.area)
print('Polygon area:', buff.area)
# properties can be nested via dot-notation
# for example, polygons have an exterior property
# which returns a LinearRing
# let's get the LinearRing's length property
print(type(buff.exterior))
print('Polygon circumference:', buff.exterior.length)
```

Let's create a line. The `LineString` constructor requires a list of points.

```{python}
point_b = geometry.Point(1, 1)
line = geometry.LineString([point_a, point_b])
print(line)
print(list(line.coords))
print(line.length)
```

## Putting things together

Let's try putting some things together. If you're wondering what a certain line is doing, then try pasting the code block into ChatGPT, which will typically provide a detailed description.

```{python}
x_coords = [0, 1, 2, 3]
y_coords = [0, 1, 2, 3]
# this is where we'll store the points
collect_points = []
# let's do a nested iteration over the 
for x in x_coords:
    for y in y_coords:
        p = geometry.Point(x, y)
        # this adds the p variable
        # to the collect_points list
        collect_points.append(p)
print('num points:', len(collect_points))
# let's turn the list of points into a MultiPoint
multi_point = geometry.MultiPoint(collect_points)
print(type(multi_point))
```

## GeoPandas

There is an easier way to keep track of multiple geometries: GeoPandas! GeoPandas is a geospatial enabled version of Pandas DataFrames. Think of it as a CSV spreadsheet with the ability to handle geometry data types.

```{python}
# install if necessary by uncommenting the next line
# !pip install geopandas
```

Let's create a GeoPandas DataFrame from our collected points

```{python}
# we'll import the whole geopandas package
# and we'll give it a shorter alias using "as"
import geopandas as gpd
# let's create a dataframe from the points
df = gpd.GeoDataFrame(geometry=collect_points, crs=None)
# the head() method returns the first (typically 5) rows
print(df.head())
```

There we go, that's a lot neater. You can add columns to DataFrames and you can also export (or import) from common geospatial file types such as `gpkg`. GeoDataFrames are also much easier to visualise.

```{python}
df.plot()
```

You can run the typical `shapely` operations on a GeoDataFrame's geometry column. Let's see what happens if we buffer the GeoDataFrame.

```{python}
buff_series = df.buffer(0.6)
# this returns a GeoSeries
# essentially a single column of a DataFrame
print(type(buff_series))
# the geometry type is now POLYGON
print(buff_series.head())
buff_series.plot()
```

DataFrames are really useful for handling data. Let's add a column called area and assign it the area value for the geometry.

```{python}
# create a new GeoDataFrame from the polygon GeoSeries column
df_buff = gpd.GeoDataFrame(geometry=buff_series, crs=None)
# adds a new column called area
# sets it to the value of the respective geometry areas
df_buff['area'] = df_buff.geometry.area
# let's do the same for x and y
df_buff['x'] = df_buff.geometry.centroid.x
df_buff['y'] = df_buff.geometry.centroid.y
# and let's filter the columns for printing
# we can do this by passing a list of column names
# to GeoPandas indexer - which uses square brackets
print(df_buff[['area', 'x', 'y']].head())
```

DataFrames are useful for filtering data.

```{python}
# here we are filtering rows based on their x values
# we are then assigning this to a new variable
# the part "df_buff.x < 2" is what does the magic
filtered_df_buff = df_buff[df_buff.x < 2]
filtered_df_buff.plot()
```

There are almost limitless ways to manipulate data in DataFrames and these are well documented on the web. If you're ever stuck, remember that ChatGPT is quite good at finding bugs and tends to have an intuitive grasp of what you're trying to do if you explain your objective well.

## Census Data Demo

In future lessons we will demonstrate some of GeoPandas data handling capabilities in more depth. For now, let's take a lightning-tour look at the census data you've been using for Bilbao.

- The census boundaries have been downloaded as a Shapefile. They were then filtered for `Bizkaia` (to keep the file size down for the demo) and saved as a GeoPackage file.
  - Original Source: [Census Boundaries Data - 2023](https://www.ine.es/ss/Satellite?L=es_ES&c=Page&cid=1259952026632&p=1259952026632&pagename=ProductosYServicios%2FPYSLayout)
  - Local link: [Census Geoms Bizkaia](./data/census_geoms_bizkaia.gpkg)
- The population census data by sex and birth.
  - Original Source: [ine.es file code 61438](https://ine.es/buscar/searchResults.do?searchString=61438&Menu_botonBuscador=&searchType=DEF_SEARCH&startat=0&L=0)
  - Local link: [61438.xlsx](./data/61438.xlsx)

### Opening a spreadsheet

```{python}
# uncomment to install (if necessary)
# !pip install pandas geopandas openpyxl matplotlib
```

Let's import Pandas and GeoPandas into our working notebook.

```{python}
import pandas as pd
import geopandas as gpd
```

Let's use Pandas to open the census data excel file, you'll need to copy the file to a local directory and update the filepath to point to your data file location. We recommend keeping the data file in an adjacently located directory so that your filepaths remain simple.

```{python}
# reads an excel file using a built-in pandas method
df_excel = pd.read_excel('./data/61438.xlsx')
print(df_excel.head(10))
```
A look at the excel file shows that the document contains nested headers. Let's remove the first few lines and then we'll set the column names manually.

```{python}
# removes the first seven rows
df_clipped = df_excel[7:]
# resets the dataframe's index to match the new rows
df_clipped = df_clipped.reset_index(drop=True)
print(df_clipped.head())
```

Let's set the new column names.

```{python}
# we can override the existing column names using a list
df_clipped.columns = ['regions', 'all_total', 'all_spanish', 'all_immig', 'male_total', 'male_spanish', 'male_immig', 'female_total', 'female_spanish', 'female_immig']
print(df_clipped.head())
```

### Opening a geopandas file

Let's use GeoPandas to open the census boundaries. Notice that we are now using GeoPandas and not Pandas, since Pandas alone does not support geospatial functionality.

```{python}
gdf_geoms = gpd.read_file('./data/census_geoms_bizkaia.gpkg')
print(gdf_geoms.head())
gdf_geoms.plot()
```

Let's do an attribute join to connect the population data to the spatial data. Notice that we have to specify the type of join method in the "how" parameter, as well as the columns to use for matching the left and right datasets. In this case, let's look through the outputs from previous cells to identify the column names. We'll then do a "inner" join, which means we'll only keep the matched rows, i.e. we don't want random unmatched census data for the rest of Spain since our geometries are for the Bizkaia region onnly!

```{python}
merged_data = gdf_geoms.merge(df_clipped, left_on='CUSEC', right_on='regions', how='inner')
print(merged_data.head())
```

### Plots

Let's plot again, this time using a column for setting the colour intensity. We'll also use a colormap.

```{python}
merged_data.plot(column='all_total', cmap='viridis')
```
What if we wanted to plot density instead of the simple totals? We can use the row geometries to divide the totals by the geometry areas. This will give a more realistic sense of population intensities.

```{python}
# let's divide by area and convert to square km
# the ** symbol will take the exponent (square in this case)
# use brackets for operator order!!
merged_data['density'] = merged_data['all_total'] / (merged_data.geometry.area / 1000**2)
merged_data.plot(column='density', cmap='plasma')
```

Remember that DataFrames can be filtered. Let's filter out locations where the density is lower than 5k per km2.

```{python}
filtered_data = merged_data[merged_data.density > 5000]
filtered_data.plot(column='density', cmap='Reds')
```

### Saving a GeoPandas file

We can now save the GeoPandas DataFrame as a file which you can then open from other locations, such as QGIS.

```{python}
merged_data.to_file('./data/bizkaia_pop_census.gpkg')
```

But, wait a minute, we've noticed that the output data is written as text instead of number types, so let's fix that for our `density` column and then we'll rewrite the file.

```{python}
merged_data['density'] = merged_data['density'].astype(float)
merged_data.to_file('./data/bizkaia_pop_census.gpkg')
```

We have just skimmed the surface! DataFrames have a lot of power. Remember that you can use ChatGPT to help you to figure out how to filter and style your data.