---
title: Welcome to Python
date-format: long
date-modified: last-modified
lang: en
language: 
  title-block-modified: "Last update"
---
Python is a great language for general purpose data wrangling. If you're working with geospatial data and general data science then it is arguably THE language. (Though "R" fans will probably debate this!)

> If you get stuck, remember that ChatGPT is really good at debugging code! Also remember that there is a treasure trove of online documentation describing APIs and thousands of community-supported questions on forums such as Stack Overflow for finding solutions to common questions.

## Some basics

Fire up your JupyterLab and follow along by typing and executing these examples. You can hover over a cell and click the copy icon to copy the code.

```{python}
a_variable = 'boo'
print(a_variable)
```

Python works with variables which store references to information. These variables can be named so that they are easy to remember and should be descriptive so that they make their purpose clear. By convention, variables in Python use lower caps with underscores and should not start with a number. 

Notice that these variable names don't tell us very much:

```{python}
a = 21
b = 34
d = b - a
```

But these ones do:
```{python}
temp_day_1 = 21
temp_day_2 = 34
temp_diff = temp_day_2 - temp_day_1
```

You should also use comments to explain your code, this becomes important as the code grows in complexity. Use a hash symbol for a line comment and triple quotes for block comments.

```{python}
"""
The following lines detail the procedure for
computing a temperature difference from day 1 to 2.
"""
# the temperature on day 1
temp_day_1 = 21
# the temperature on day 2
temp_day_2 = 34
# the temperature difference from day 1 to 2
temp_diff = temp_day_2 - temp_day_1
```

Another concept is the use of functions. Functions take parameters (arguments) and return a result according to a defined sequence of steps. In certain contexts they are also referred to as "methods", but don't worry too much about that for now. A commonly used function in Python is the `print()` method. Notice that a function has parentheses, and this is where you pass your function arguments.

```{python}
# you can pass a parameter to print()
# it will then take the parameter and print it to the screen
print('This will print boo!')
# the same for a variable
print(temp_diff)
# and in the case of the print() method
# multiple arguments can be passed at once
# function arguments are separated with commas
print('The temp diff is: ', temp_diff)
```

You can define a function using the `def` keyword. Let's define a function which takes a number and multiplies it by a specified multiplier.

```{python}
# you must use "def"
# define your parameters
def num_multiply(a_number, multiple):
  # note the use of indented lines
  multiplied_number = a_number * multiple
  # you must return a value if you want to use
  # it outside of the function
  return multiplied_number

# let's try it out
# assign the returned value to a variable
out_num_a = num_multiply(2, 2)
print('2x2=', out_num_a)
# functions save us from rewriting the
# same bits of code over and over...
# we can use the same logic with new arguments
out_num_b = num_multiply(3, 10)
print('3x10=', out_num_b)
```

> If you find yourself writing bits of code which seem repetitive, then you probably want to be using functions...!

Variables can store different kinds of data, including `str`, `int`, `float` (decimal), and other types such as "booleans" (`True` and `False`) and `None` types. If you want to find out what `type` a variable is, you can use the built-in `type()` method, which will tell you what `type` a given variable is.

```{python}
# here we are nesting methods
# the type() method will run first and returns a result
# this result is then passed to the print() method
print(type(a_variable))
print(type(temp_diff))
print(type(1))
print(type(1.0))
print(type(True))
print(type(None))
```

Once you've assigned a value to a variable, you can use this variable to do things like maths (in the case of `int` or `float` types).

```{python}
temp_day_1 = 21
temp_day_2 = 34
print('added:', temp_day_1 + temp_day_2)
print('subtracted:', temp_day_2 - temp_day_1)
print('divided:', temp_day_2 / 2)
# modulo gives the remainder after division
print('modulo:', temp_day_1 % 2)
```

You can do surprising things with strings as well.

```{python}
part_1 = 'Hello'
part_2 = 'there!'
# here we'll combine the parts using an empty space
together = part_1 + ' ' + part_2
print(together)
```

Python has some other types that can be useful. One of these is lists, which use square brackets to collect several items into the same variable.
```{python}
my_list = [1, 2, 3, 4]
# gets the length of a list
print('number of items:', len(my_list))
# indexes into the first item in a list
# in Python, lists are zero indexed
# note the use of square brackets for indexing
get_something = my_list[0]
print('first item:', get_something)
# gets the last item
get_something_else = my_list[-1]
print('last item:', get_something_else)
# gets list entries from index 0 to before index 2
get_several_things = my_list[0:2]
print('several items:', get_several_things)
```

Note that you can iterate over lists using `for` and `in` syntax. We use a variable, which we are here calling `num`, to store the current result from iterating over the list. We can then use that variable to do something.

```{python}
# this will print each number in my_list
for num in my_list:
    # note the indented line
    # indentation has to be used consistently
    print('num is currently:', num)
```

Python has a number of built-in convenience methods, which can simplify common tasks:
```{python}
print('min:', min(my_list))
print('max:', max(my_list))
# note the extra step to casts the output
# from reversed to a list type
print('reversed:', list(reversed(my_list)))
print('absolute:', abs(-100))
```

## Importing packages

Python can import packages which contain reusable code.

Packages have to be installed before they are used, unless they are part of the default Python library. Let's install the `shapely` package. Note that this method of installing a package with a leading exclamation mark is particular to JupyterLab Notebooks, and only has to be done if the package is not yet installed.

```{python}
# checks that the shapely package
# is installed for this notebook
# uncomment the next line to run
# !pip install shapely
```

Once installed and available, we can use modules provided by the package. Here we are using the `from` and `import` syntax to import the `geometry` module which is available from the `shapely` package.

```{python}
from shapely import geometry
```

## Shapely

`shapely` let's us do some neat things with spatial information. Let's define a `Point` type using the `geometry` module. The `geometry` module has some already defined methods which we can call. Let's use the `Point` constructor to generate a new point. Note the use of dot-notation.

```{python}
# this creates a point using the Point constructor
# defined by the geometry module
point_a = geometry.Point(0, 0)
print(point_a)
print(type(point_a))
```

Different packages and modules define set patterns of behaviour. To understand what these are and what you can do with them, refer to the package documentation and ask ChatGPT to help you along the way.

For example, a `shapely` `Point` type has built-in methods which allow you to easily produce certain forms of behaviour. You can access these using dot-notation. Let's buffer the point object using the provided `buffer()` method.

```{python}
buff = point_a.buffer(10)
print(buff)
print(type(buff))
```

Notice that we now have a `Polygon` type since the returned type is no longer a `Point`. Types (which are a form of Python `class`) can have properties which are accessed using dot-notation. Unlike methods, properties do not require parentheses because they do not accept arguments.

```{python}
# here we are using the area property to retrieve the area
print('Point area:', point_a.area)
print('Polygon area:', buff.area)
# properties can be nested via dot-notation
# for example, polygons have an exterior property
# which returns a LinearRing
# let's get the LinearRing's length property
print(type(buff.exterior))
print('Polygon circumference:', buff.exterior.length)
```

Let's create a line. The `LineString` constructor requires a list of points.

```{python}
point_b = geometry.Point(1, 1)
line = geometry.LineString([point_a, point_b])
print(line)
print(list(line.coords))
print(line.length)
```

## Putting things together

Let's try putting some things together. If you're wondering what a certain line is doing, then try pasting the code block into ChatGPT, which will typically provide a detailed description.

```{python}
x_coords = [0, 1, 2, 3]
y_coords = [0, 1, 2, 3]
# this is where we'll store the points
collect_points = []
# let's do a nested iteration over the 
for x in x_coords:
    for y in y_coords:
        p = geometry.Point(x, y)
        # this adds the p variable
        # to the collect_points list
        collect_points.append(p)
print('num points:', len(collect_points))
# let's turn the list of points into a MultiPoint
multi_point = geometry.MultiPoint(collect_points)
print(type(multi_point))
```

## GeoPandas

There is an easier way to keep track of multiple geometries: GeoPandas! GeoPandas is a geospatial enabled version of Pandas DataFrames. Think of it as a CSV spreadsheet with the ability to handle geometry data types.

```{python}
# install if necessary by uncommenting the next line
# !pip install geopandas
```

Let's create a GeoPandas DataFrame from our collected points

```{python}
# we'll import the whole geoopandas package
# and we'll give it a shorter alias using "as"
import geopandas as gpd
# let's create a dataframe from the points
df = gpd.GeoDataFrame(geometry=collect_points, crs=None)
# the head() method returns the first (typically 5) rows
print(df.head())
```

There we go, that's a lot neater. You can add columns to DataFrames and you can also export (or import) from common geospatial file types such as `gpkg`. GeoDataFrames are also much easier to visualise.

```{python}
df.plot()
```

You can run the typical `shapely` operations on a GeoDataFrame's geometry column. Let's see what happens if we buffer the GeoDataFrame.

```{python}
buff_series = df.buffer(0.6)
# this returns a GeoSeries
# essentially a single column of a DataFrame
print(type(buff_series))
# the geometry type is now POLYGON
print(buff_series.head())
buff_series.plot()
```

DataFrames are really useful for handling data. Let's add a column called area and assign it the area value for the geometry.

```{python}
# create a new GeoDataFrame from the polygon GeoSeries column
df_buff = gpd.GeoDataFrame(geometry=buff_series, crs=None)
# adds a new column called area
# sets it to the value of the respective geometry areas
df_buff['area'] = df_buff.geometry.area
# let's do the same for x and y
df_buff['x'] = df_buff.geometry.centroid.x
df_buff['y'] = df_buff.geometry.centroid.y
# and let's filter the columns for printing
# we can do this by passing a list of column names
# to GeoPandas indexer - which uses square brackets
print(df_buff[['area', 'x', 'y']].head())
```

DataFrames are useful for filtering data.

```{python}
# here we are filtering rows based on their x values
# we are then assigning this to a new variable
# the part "df_buff.x < 2" is what does the magic
filtered_df_buff = df_buff[df_buff.x < 2]
filtered_df_buff.plot()
```

There are almost limitless ways to manipulate data in DataFrames and these are well documented on the web. If you're ever stuck, remember that ChatGPT is quite good at finding bugs and tends to have an intuitive grasp of what you're trying to do if you explain your objective well.

The [Intro to GeoPandas](./intro_to_geopandas.qmd) lesson will demonstrate some of GeoPandas data handling capabilities in more depth.